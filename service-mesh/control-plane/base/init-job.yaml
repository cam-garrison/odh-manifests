apiVersion: batch/v1
kind: Job
metadata:
  name: odh-ossm-init-job
spec:
  template:
    spec:
      containers:
      - name: odh-ossm-init-job
        image: quay.io/openshift/origin-cli
        command: ["/bin/bash", "-c", "--"]
        args:
          - |
            mkdir /tmp/bin

            # install jq for json parsing. 
            wget https://stedolan.github.io/jq/download/linux64/jq  -O /tmp/bin/jq  && chmod +x /tmp/bin/jq 

            # install envsubst 
            curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o /tmp/bin/envsubst && chmod +x /tmp/bin/envsubst
            export PATH=/tmp/bin:$PATH

            export CLIENTS_SECRET=$(openssl rand -hex 32)
            export HMACS_SECRET=$(openssl rand -hex 32)
            export DOMAIN=$(kubectl get ingress.config.openshift.io cluster -o 'jsonpath={.spec.domain}')
            echo $DOMAIN
            endpoint=$(curl https://kubernetes.default.svc/.well-known/oauth-authorization-server -sS -k)
            export TOKEN_ENDPOINT=$(echo $endpoint | jq .token_endpoint)
            export AUTH_ENDPOINT=$(echo $endpoint | jq .authorization_endpoint)
            export OAUTH_ROUTE=$(echo $endpoint | jq .issuer | sed 's/"//g; s/https:\/\///g') # remove quotes and https

            echo $TOKEN_ENDPOINT
            echo $AUTH_ENDPOINT
            echo $OAUTH_ROUTE

            # tmp
            echo $CLIENTS_SECRET
            echo $HMACS_SECRET

            apply_yaml() {
              filename="$1"

              case "$filename" in
                "/etc/cfg-map/authconfig.yaml")
                  namespace="opendatahub"
                  ;;
                *)
                  namespace="istio-system"
                  ;;
              esac

              # Read in the contents of the YAML file
              yaml=$(cat "$filename")

              # Apply the substituted YAML using kubectl
              echo "$yaml" | envsubst | kubectl apply -n $namespace -f -
            }

            # wait for app to be ready
            kubectl -n istio-system wait --for=condition=Ready smcp/basic --timeout=60s

            # iterate over all files in the subdirectory
            for filename in /etc/cfg-map/*
            do
              apply_yaml "$filename"
            done

            kubectl rollout restart deployment -n istio-system istio-ingressgateway
            exit 0
            
        volumeMounts:
          - name: config-volume
            mountPath: /etc/cfg-map
      volumes:
      - name: config-volume
        configMap:
          name: mounting-configmap
      restartPolicy: Never
      serviceAccountName: init-job-serviceaccount