apiVersion: batch/v1
kind: Job
metadata:
  name: odh-ossm-init-job
spec:
  template:
    spec:
      containers:
      - name: odh-ossm-init-job
        image: quay.io/openshift/origin-cli
        command: ["/bin/bash", "-c", "--"]
        args:
          - |
            # etcdpasswordexists=$(oc get secrets -o name | grep etcd-passwords || echo "false")
            # modelservingetcdexists=$(oc get secrets -o name | grep model-serving-etcd || echo "false")

            export CLIENTS_SECRET=$(openssl rand -hex 32)
            export HMACS_SECRET=$(openssl rand -hex 32)
            export DOMAIN=$(kubectl get ingress.config.openshift.io cluster -o 'jsonpath={.spec.domain}')
            echo $DOMAIN
            endpoint=$(curl https://kubernetes.default.svc/.well-known/oauth-authorization-server -sS -k)
            export endpoint
            export OAUTH_ROUTE="oauth-openshift.$DOMAIN" # not 100% sure this will be universal.
            echo $OAUTH_ROUTE

            # No jq, use python to parse endpoints.
            export TOKEN_ENDPOINT=$(python -c "import os, json; \
            endpoint = os.environ['endpoint']; \
            loaded_json = json.loads(endpoint); \
            print(loaded_json['token_endpoint'])")

            export AUTH_ENDPOINT=$(python -c "import os, json; \
            endpoint = os.environ['endpoint']; \
            loaded_json = json.loads(endpoint); \
            print(loaded_json['authorization_endpoint'])")

            echo $TOKEN_ENDPOINT
            echo $AUTH_ENDPOINT

            # tmp
            echo $CLIENTS_SECRET
            echo $HMACS_SECRET
            ls -l /etc/cfg-map

            python -c "
            import os
            
            text=os.path.expandvars('$CLIENTS_SECRET/test/testing')
            print(text)" | cat -n 

            apply_yaml() {
              filename="$1"

              case "$filename" in
                "/etc/cfg-map/authconfig.yaml")
                  namespace="opendatahub"
                  ;;
                *)
                  namespace="istio-system"
                  ;;
              esac

              # Read in the contents of the YAML file
              yaml=$(cat "$filename")

              # Substitute environment variables using a Python script
              substituted_yaml=$(python -c "
            import os

            yaml_text = '''$yaml'''
            yaml_text_with_env = os.path.expandvars(yaml_text)
            print(yaml_text_with_env)
            ")
              # Apply the substituted YAML using kubectl
                echo "$substituted_yaml" | kubectl apply -n $namespace -f -
            }

            # wait for app to be ready
            kubectl -n istio-system wait --for=condition=Ready smcp/basic --timeout=60s

            # iterate over all files in the subdirectory
            for filename in /etc/cfg-map/*
            do
              apply_yaml "$filename"
            done

            kubectl rollout restart deployment -n istio-system istio-ingressgateway
            exit 0
            
        volumeMounts:
          - name: config-volume
            mountPath: /etc/cfg-map
      volumes:
      - name: config-volume
        configMap:
          name: mounting-configmap
      restartPolicy: Never
      serviceAccountName: init-job-serviceaccount